[gd_scene load_steps=10 format=3 uid="uid://cvf2kai564eus"]

[ext_resource type="Texture2D" uid="uid://bkfufpuin4pky" path="res://assets/graphics/backgrounds/flatbg.jpg" id="1_o5qli"]
[ext_resource type="PackedScene" uid="uid://bnw55jeq4voyh" path="res://scenes/Player.tscn" id="2_0wfyh"]
[ext_resource type="PackedScene" uid="uid://nxux4xnu267n" path="res://scenes/GroundSegment.tscn" id="2_sugp2"]
[ext_resource type="PackedScene" uid="uid://w7tqxoey71x8" path="res://scenes/Obstacle.tscn" id="2_tbgi4"]
[ext_resource type="PackedScene" uid="uid://cvh8bos5b3uxb" path="res://scenes/marites.tscn" id="3_tefeu"]
[ext_resource type="PackedScene" uid="uid://rpyrkdq452mu" path="res://scenes/Ebike.tscn" id="4_tefeu"]
[ext_resource type="PackedScene" uid="uid://bgg0oc1at3guf" path="res://scenes/inuman.tscn" id="5_o6xl0"]
[ext_resource type="PackedScene" uid="uid://tdo157ods4h" path="res://scenes/person.tscn" id="6_tipki"]

[sub_resource type="GDScript" id="GDScript_ig7tw"]
script/source = "extends Node2D

@export var ground_scene: PackedScene
@export var obstacle_scenes: Array[PackedScene]
var positive_obstacles: Array[PackedScene] = []
var negative_obstacles: Array[PackedScene] = []
@export var segment_width: float = 800

var last_segment_x: float = 0
var obstacle_timer: float = 0.0
var obstacle_spawn_interval: float = 0.0  # Will be randomized

@onready var player = $Player
@onready var viewport = get_viewport()

var ground_y: float  # Store fixed ground Y position here

func _ready():
	randomize()
	spawn_ground(0)
	spawn_ground(segment_width)
	ground_y = player.global_position.y
	obstacle_spawn_interval = randf_range(0.8, 2.0)

	# Categorize obstacles by group (based on scene names or your own logic)
	for scene in obstacle_scenes:
		var temp = scene.instantiate()
		if temp.is_in_group(\"Marites\") or temp.is_in_group(\"Inuman\") or temp.is_in_group(\"Person\"):
			positive_obstacles.append(scene)
		else:
			negative_obstacles.append(scene)
		temp.queue_free()  # Cleanup

func spawn_ground(x_pos: float):
	if !ground_scene:
		push_error(\"Ground scene not assigned!\")
		return

	var new_ground = ground_scene.instantiate()
	new_ground.position.x = x_pos
	new_ground.z_index = -1
	add_child(new_ground)
	last_segment_x = x_pos

func spawn_obstacle():
	if positive_obstacles.is_empty() and negative_obstacles.is_empty():
		push_error(\"No obstacles available!\")
		return

	var is_positive := randf() < 0.20  # 25% chance to spawn a positive obstacle

	var selected_scene: PackedScene

	if is_positive and !positive_obstacles.is_empty():
		selected_scene = positive_obstacles[randi() % positive_obstacles.size()]
	else:
		selected_scene = negative_obstacles[randi() % negative_obstacles.size()]

	var obstacle = selected_scene.instantiate()
	var spawn_x = player.global_position.x + viewport.size.x
	obstacle.global_position = Vector2(spawn_x, ground_y)
	add_child(obstacle)

func _process(delta):
	var camera_right_edge = player.global_position.x + (viewport.size.x / 2)

	if camera_right_edge > last_segment_x - segment_width:
		spawn_ground(last_segment_x + segment_width)

	# Remove old ground segments
	for child in get_children():
		if child is StaticBody2D and child.position.x < player.global_position.x - segment_width * 2:
			child.queue_free()

	# Spawn obstacles periodically
	obstacle_timer += delta
	if obstacle_timer >= obstacle_spawn_interval:
		obstacle_timer = 0
		spawn_obstacle()
		obstacle_spawn_interval = randf_range(0.8, 2.0)  # Set next random interval
"

[node name="Main" type="Node2D"]
script = SubResource("GDScript_ig7tw")
ground_scene = ExtResource("2_sugp2")
obstacle_scenes = Array[PackedScene]([ExtResource("2_tbgi4"), ExtResource("3_tefeu"), ExtResource("4_tefeu"), ExtResource("5_o6xl0"), ExtResource("6_tipki")])

[node name="Background1" type="Sprite2D" parent="."]
position = Vector2(-729, -993)
scale = Vector2(0.998438, 0.989063)
texture = ExtResource("1_o5qli")
centered = false
offset = Vector2(400, -75)

[node name="Player" parent="." instance=ExtResource("2_0wfyh")]
position = Vector2(-11, -22)

[node name="BackgroundSprite" type="Sprite2D" parent="."]
centered = false
